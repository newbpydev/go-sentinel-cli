name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        run: go mod tidy && go mod verify
      
      - name: Run tests with race detection
        run: go test -race -v -coverprofile=coverage.txt -covermode=atomic ./...
        continue-on-error: true # Allow tests to fail but still collect coverage
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml
          
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install Gosec
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          
      - name: Run Gosec Security Scanner
        run: |
          gosec -fmt sarif -out gosec.sarif ./...
        continue-on-error: true
          
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BINARY_NAME=go-sentinel-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          go build -ldflags="-s -w" -o dist/${BINARY_NAME} ./cmd/go-sentinel-cli
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: go-sentinel-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  quality-gate:
    name: Quality Gate
    needs: [test, lint, security, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Test result: ${{ needs.test.result }}"
          echo "Lint result: ${{ needs.lint.result }}"
          echo "Security result: ${{ needs.security.result }}"
          echo "Build result: ${{ needs.build.result }}"
          
          if [ "${{ needs.lint.result }}" = "failure" ]; then
            echo "❌ Linting failed"
            exit 1
          fi
          
          if [ "${{ needs.security.result }}" = "failure" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          
          if [ "${{ needs.build.result }}" = "failure" ]; then
            echo "❌ Build failed"
            exit 1
          fi
          
          echo "✅ Quality gate passed"

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true
        
    - name: Run benchmarks
      run: |
        mkdir -p build/benchmarks
        go test -bench=. -benchmem -benchtime=100ms -run=^$ ./internal/cli > build/benchmarks/results.txt
        
    - name: Display benchmark results
      run: |
        echo "## Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat build/benchmarks/results.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-ubuntu
        path: build/benchmarks/results.txt
        retention-days: 30
